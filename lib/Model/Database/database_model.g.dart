// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'database_model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Articles.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// Articles TABLE
class TableArticles extends SqfEntityTableBase {
  TableArticles() {
    // declare properties of EntityTable
    tableName = 'articles';
    primaryKeyName = 'uuid';
    primaryKeyType = PrimaryKeyType.text;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('author', DbType.text),
      SqfEntityFieldBase('title', DbType.text),
      SqfEntityFieldBase('description', DbType.text),
      SqfEntityFieldBase('url', DbType.text),
      SqfEntityFieldBase('urlToImage', DbType.text),
      SqfEntityFieldBase('publishedAt', DbType.datetime,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('content', DbType.text),
      SqfEntityFieldBase('created_at', DbType.datetime,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('updated_at', DbType.datetime,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('deleted_at', DbType.datetime,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldRelationshipBase(
          TableSources.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'source_uuid',
          isNotNull: true),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableArticles();
  }
}

// Sources TABLE
class TableSources extends SqfEntityTableBase {
  TableSources() {
    // declare properties of EntityTable
    tableName = 'sources';
    primaryKeyName = 'uuid';
    primaryKeyType = PrimaryKeyType.text;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('id', DbType.text),
      SqfEntityFieldBase('name', DbType.text),
      SqfEntityFieldBase('created_at', DbType.datetime,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('updated_at', DbType.datetime,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('deleted_at', DbType.datetime,
          minValue: DateTime.parse('1900-01-01')),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableSources();
  }
}
// END TABLES

// BEGIN DATABASE MODEL
class DB extends SqfEntityModelProvider {
  DB() {
    databaseName = newsDb.databaseName;
    password = newsDb.password;
    dbVersion = newsDb.dbVersion;
    preSaveAction = newsDb.preSaveAction;
    logFunction = newsDb.logFunction;
    databaseTables = [
      TableArticles.getInstance,
      TableSources.getInstance,
    ];

    bundledDatabasePath = newsDb
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Articles
class Articles extends TableBase {
  Articles(
      {this.uuid,
      this.author,
      this.title,
      this.description,
      this.url,
      this.urlToImage,
      this.publishedAt,
      this.content,
      this.created_at,
      this.updated_at,
      this.deleted_at,
      this.source_uuid}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Articles.withFields(
      this.uuid,
      this.author,
      this.title,
      this.description,
      this.url,
      this.urlToImage,
      this.publishedAt,
      this.content,
      this.created_at,
      this.updated_at,
      this.deleted_at,
      this.source_uuid) {
    _setDefaultValues();
  }
  Articles.withId(
      this.uuid,
      this.author,
      this.title,
      this.description,
      this.url,
      this.urlToImage,
      this.publishedAt,
      this.content,
      this.created_at,
      this.updated_at,
      this.deleted_at,
      this.source_uuid) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Articles.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    uuid = o['uuid'].toString();
    if (o['author'] != null) {
      author = o['author'].toString();
    }
    if (o['title'] != null) {
      title = o['title'].toString();
    }
    if (o['description'] != null) {
      description = o['description'].toString();
    }
    if (o['url'] != null) {
      url = o['url'].toString();
    }
    if (o['urlToImage'] != null) {
      urlToImage = o['urlToImage'].toString();
    }
    if (o['publishedAt'] != null) {
      publishedAt = int.tryParse(o['publishedAt'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['publishedAt'].toString())!)
          : DateTime.tryParse(o['publishedAt'].toString());
    }
    if (o['content'] != null) {
      content = o['content'].toString();
    }
    if (o['created_at'] != null) {
      created_at = int.tryParse(o['created_at'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['created_at'].toString())!)
          : DateTime.tryParse(o['created_at'].toString());
    }
    if (o['updated_at'] != null) {
      updated_at = int.tryParse(o['updated_at'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['updated_at'].toString())!)
          : DateTime.tryParse(o['updated_at'].toString());
    }
    if (o['deleted_at'] != null) {
      deleted_at = int.tryParse(o['deleted_at'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['deleted_at'].toString())!)
          : DateTime.tryParse(o['deleted_at'].toString());
    }
    source_uuid = o['source_uuid'].toString();

    // RELATIONSHIPS FromMAP
    plSources = o['sources'] != null
        ? Sources.fromMap(o['sources'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP

    isSaved = true;
  }
  // FIELDS (Articles)
  String? uuid;
  String? author;
  String? title;
  String? description;
  String? url;
  String? urlToImage;
  DateTime? publishedAt;
  String? content;
  DateTime? created_at;
  DateTime? updated_at;
  DateTime? deleted_at;
  String? source_uuid;
  bool? isSaved;
  // end FIELDS (Articles)

// RELATIONSHIPS (Articles)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plSources', 'plField2'..]) or so on..
  Sources? plSources;

  /// get Sources By Source_uuid
  Future<Sources?> getSources(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Sources().getById(source_uuid,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (Articles)

  static const bool _softDeleteActivated = false;
  ArticlesManager? __mnArticles;

  ArticlesManager get _mnArticles {
    return __mnArticles = __mnArticles ?? ArticlesManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['uuid'] = uuid;
    if (author != null || !forView) {
      map['author'] = author;
    }
    if (title != null || !forView) {
      map['title'] = title;
    }
    if (description != null || !forView) {
      map['description'] = description;
    }
    if (url != null || !forView) {
      map['url'] = url;
    }
    if (urlToImage != null || !forView) {
      map['urlToImage'] = urlToImage;
    }
    if (publishedAt != null) {
      map['publishedAt'] = forJson
          ? publishedAt!.toString()
          : forQuery
              ? publishedAt!.millisecondsSinceEpoch
              : publishedAt;
    } else if (publishedAt != null || !forView) {
      map['publishedAt'] = null;
    }
    if (content != null || !forView) {
      map['content'] = content;
    }
    if (created_at != null) {
      map['created_at'] = forJson
          ? created_at!.toString()
          : forQuery
              ? created_at!.millisecondsSinceEpoch
              : created_at;
    } else if (created_at != null || !forView) {
      map['created_at'] = null;
    }
    if (updated_at != null) {
      map['updated_at'] = forJson
          ? updated_at!.toString()
          : forQuery
              ? updated_at!.millisecondsSinceEpoch
              : updated_at;
    } else if (updated_at != null || !forView) {
      map['updated_at'] = null;
    }
    if (deleted_at != null) {
      map['deleted_at'] = forJson
          ? deleted_at!.toString()
          : forQuery
              ? deleted_at!.millisecondsSinceEpoch
              : deleted_at;
    } else if (deleted_at != null || !forView) {
      map['deleted_at'] = null;
    }
    if (source_uuid != null) {
      map['source_uuid'] = forView
          ? plSources == null
              ? source_uuid
              : plSources!.id
          : source_uuid;
    } else if (source_uuid != null || !forView) {
      map['source_uuid'] = null;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['uuid'] = uuid;
    if (author != null || !forView) {
      map['author'] = author;
    }
    if (title != null || !forView) {
      map['title'] = title;
    }
    if (description != null || !forView) {
      map['description'] = description;
    }
    if (url != null || !forView) {
      map['url'] = url;
    }
    if (urlToImage != null || !forView) {
      map['urlToImage'] = urlToImage;
    }
    if (publishedAt != null) {
      map['publishedAt'] = forJson
          ? publishedAt!.toString()
          : forQuery
              ? publishedAt!.millisecondsSinceEpoch
              : publishedAt;
    } else if (publishedAt != null || !forView) {
      map['publishedAt'] = null;
    }
    if (content != null || !forView) {
      map['content'] = content;
    }
    if (created_at != null) {
      map['created_at'] = forJson
          ? created_at!.toString()
          : forQuery
              ? created_at!.millisecondsSinceEpoch
              : created_at;
    } else if (created_at != null || !forView) {
      map['created_at'] = null;
    }
    if (updated_at != null) {
      map['updated_at'] = forJson
          ? updated_at!.toString()
          : forQuery
              ? updated_at!.millisecondsSinceEpoch
              : updated_at;
    } else if (updated_at != null || !forView) {
      map['updated_at'] = null;
    }
    if (deleted_at != null) {
      map['deleted_at'] = forJson
          ? deleted_at!.toString()
          : forQuery
              ? deleted_at!.millisecondsSinceEpoch
              : deleted_at;
    } else if (deleted_at != null || !forView) {
      map['deleted_at'] = null;
    }
    if (source_uuid != null) {
      map['source_uuid'] = forView
          ? plSources == null
              ? source_uuid
              : plSources!.id
          : source_uuid;
    } else if (source_uuid != null || !forView) {
      map['source_uuid'] = null;
    }

    return map;
  }

  /// This method returns Json String [Articles]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Articles]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      uuid,
      author,
      title,
      description,
      url,
      urlToImage,
      publishedAt != null ? publishedAt!.millisecondsSinceEpoch : null,
      content,
      created_at != null ? created_at!.millisecondsSinceEpoch : null,
      updated_at != null ? updated_at!.millisecondsSinceEpoch : null,
      deleted_at != null ? deleted_at!.millisecondsSinceEpoch : null,
      source_uuid
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      uuid,
      author,
      title,
      description,
      url,
      urlToImage,
      publishedAt != null ? publishedAt!.millisecondsSinceEpoch : null,
      content,
      created_at != null ? created_at!.millisecondsSinceEpoch : null,
      updated_at != null ? updated_at!.millisecondsSinceEpoch : null,
      deleted_at != null ? deleted_at!.millisecondsSinceEpoch : null,
      source_uuid
    ];
  }

  static Future<List<Articles>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Articles.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Articles>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Articles>[];
    try {
      objList = list
          .map((articles) => Articles.fromMap(articles as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Articles.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Articles>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Articles> objList = <Articles>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Articles.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plSources'))) {
          obj.plSources =
              obj.plSources ?? await obj.getSources(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Articles by ID if exist, otherwise returns null
  /// Primary Keys: String? uuid
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Articles] if exist, otherwise returns null
  Future<Articles?> getById(String? uuid,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (uuid == null) {
      return null;
    }
    Articles? obj;
    final data = await _mnArticles.getById([uuid]);
    if (data.length != 0) {
      obj = Articles.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plSources'))) {
          obj.plSources =
              obj.plSources ?? await obj.getSources(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Articles) object. If the Primary Key (uuid) field is null, returns Error.
  /// INSERTS (If not exist) OR REPLACES (If exist) data while Primary Key is not null.
  /// Call the saveAs() method if you do not want to save it when there is another row with the same uuid
  /// <returns>Returns BoolResult
  @override
  Future<BoolResult> save({bool ignoreBatch = true}) async {
    final result = BoolResult(success: false);
    try {
      await _mnArticles.rawInsert(
          'INSERT ${isSaved! ? 'OR REPLACE' : ''} INTO articles (uuid, author, title, description, url, urlToImage, publishedAt, content, created_at, updated_at, deleted_at, source_uuid)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?)',
          toArgsWithIds(),
          ignoreBatch);
      result.success = true;
      isSaved = true;
    } catch (e) {
      result.errorMessage = e.toString();
    }

    saveResult = result;
    return result;
  }

  void rollbackId() {
    if (isInsert == true) {
      uuid = null;
    }
  }

  /// saveAll method saves the sent List<Articles> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Articles> articleses) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await DB().batchStart();
    for (final obj in articleses) {
      await obj.save();
    }
    if (!isStartedBatch) {
      result = await DB().batchCommit();
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns 1
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnArticles.rawInsert(
          'INSERT OR REPLACE INTO articles (uuid, author, title, description, url, urlToImage, publishedAt, content, created_at, updated_at, deleted_at, source_uuid)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?)',
          [
            uuid,
            author,
            title,
            description,
            url,
            urlToImage,
            publishedAt != null ? publishedAt!.millisecondsSinceEpoch : null,
            content,
            created_at != null ? created_at!.millisecondsSinceEpoch : null,
            updated_at != null ? updated_at!.millisecondsSinceEpoch : null,
            deleted_at != null ? deleted_at!.millisecondsSinceEpoch : null,
            source_uuid
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Articles uuid=$uuid updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Articles uuid=$uuid did not update');
      }
      return 1;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Articles Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// Deletes Articles

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Articles invoked (uuid=$uuid)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnArticles
          .delete(QueryParams(whereString: 'uuid=?', whereArguments: [uuid]));
    } else {
      return _mnArticles.updateBatch(
          QueryParams(whereString: 'uuid=?', whereArguments: [uuid]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Articles] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  ArticlesFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ArticlesFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  ArticlesFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ArticlesFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
  }
  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion articles

// region ArticlesField
class ArticlesField extends FilterBase {
  ArticlesField(ArticlesFilterBuilder articlesFB) : super(articlesFB);

  @override
  ArticlesFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as ArticlesFilterBuilder;
  }

  @override
  ArticlesFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as ArticlesFilterBuilder;
  }

  @override
  ArticlesFilterBuilder isNull() {
    return super.isNull() as ArticlesFilterBuilder;
  }

  @override
  ArticlesFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as ArticlesFilterBuilder;
  }

  @override
  ArticlesFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as ArticlesFilterBuilder;
  }

  @override
  ArticlesFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as ArticlesFilterBuilder;
  }

  @override
  ArticlesFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as ArticlesFilterBuilder;
  }

  @override
  ArticlesFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as ArticlesFilterBuilder;
  }

  @override
  ArticlesFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as ArticlesFilterBuilder;
  }

  @override
  ArticlesFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as ArticlesFilterBuilder;
  }

  @override
  ArticlesFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as ArticlesFilterBuilder;
  }

  @override
  ArticlesFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as ArticlesFilterBuilder;
  }

  @override
  ArticlesField get not {
    return super.not as ArticlesField;
  }
}
// endregion ArticlesField

// region ArticlesFilterBuilder
class ArticlesFilterBuilder extends ConjunctionBase {
  ArticlesFilterBuilder(Articles obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnArticles = obj._mnArticles;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  ArticlesManager? _mnArticles;

  /// put the sql keyword 'AND'
  @override
  ArticlesFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  ArticlesFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  ArticlesFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  ArticlesFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  ArticlesFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  ArticlesFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  ArticlesFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  ArticlesFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  ArticlesFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  ArticlesFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  ArticlesFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  ArticlesField _setField(ArticlesField? field, String colName, DbType dbtype) {
    return ArticlesField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  ArticlesField? _uuid;
  ArticlesField get uuid {
    return _uuid = _setField(_uuid, 'uuid', DbType.integer);
  }

  ArticlesField? _author;
  ArticlesField get author {
    return _author = _setField(_author, 'author', DbType.text);
  }

  ArticlesField? _title;
  ArticlesField get title {
    return _title = _setField(_title, 'title', DbType.text);
  }

  ArticlesField? _description;
  ArticlesField get description {
    return _description = _setField(_description, 'description', DbType.text);
  }

  ArticlesField? _url;
  ArticlesField get url {
    return _url = _setField(_url, 'url', DbType.text);
  }

  ArticlesField? _urlToImage;
  ArticlesField get urlToImage {
    return _urlToImage = _setField(_urlToImage, 'urlToImage', DbType.text);
  }

  ArticlesField? _publishedAt;
  ArticlesField get publishedAt {
    return _publishedAt =
        _setField(_publishedAt, 'publishedAt', DbType.datetime);
  }

  ArticlesField? _content;
  ArticlesField get content {
    return _content = _setField(_content, 'content', DbType.text);
  }

  ArticlesField? _created_at;
  ArticlesField get created_at {
    return _created_at = _setField(_created_at, 'created_at', DbType.datetime);
  }

  ArticlesField? _updated_at;
  ArticlesField get updated_at {
    return _updated_at = _setField(_updated_at, 'updated_at', DbType.datetime);
  }

  ArticlesField? _deleted_at;
  ArticlesField get deleted_at {
    return _deleted_at = _setField(_deleted_at, 'deleted_at', DbType.datetime);
  }

  ArticlesField? _source_uuid;
  ArticlesField get source_uuid {
    return _source_uuid = _setField(_source_uuid, 'source_uuid', DbType.text);
  }

  /// Deletes List<Articles> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnArticles!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnArticles!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'uuid IN (SELECT uuid from articles ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnArticles!.updateBatch(qparams, values);
  }

  /// This method always returns [Articles] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Articles?
  @override
  Future<Articles?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnArticles!.toList(qparams);
    final data = await objFuture;
    Articles? obj;
    if (data.isNotEmpty) {
      obj = Articles.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plSources'))) {
          obj.plSources =
              obj.plSources ?? await obj.getSources(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Articles]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Articles?
  @override
  Future<Articles> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Articles();
  }

  /// This method returns int. [Articles]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? articlesCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final articlesesFuture = await _mnArticles!.toList(qparams);
    final int count = articlesesFuture[0]['CNT'] as int;
    if (articlesCount != null) {
      articlesCount(count);
    }
    return count;
  }

  /// This method returns List<Articles> [Articles]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Articles>
  @override
  Future<List<Articles>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Articles> articlesesData = await Articles.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return articlesesData;
  }

  /// This method returns Json String [Articles]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Articles]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Articles]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnArticles!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Articles]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `uuid` FROM articles WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<String>.
  /// <returns>List<String>
  @override
  Future<List<String>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<String> uuidData = <String>[];
    qparams.selectColumns = ['uuid'];
    final uuidFuture = await _mnArticles!.toList(qparams);

    final int count = uuidFuture.length;
    for (int i = 0; i < count; i++) {
      uuidData.add(uuidFuture[i]['uuid'] as String);
    }
    return uuidData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Articles]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnArticles!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Articles.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnArticles!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion ArticlesFilterBuilder

// region ArticlesFields
class ArticlesFields {
  static TableField? _fUuid;
  static TableField get uuid {
    return _fUuid =
        _fUuid ?? SqlSyntax.setField(_fUuid, 'uuid', DbType.integer);
  }

  static TableField? _fAuthor;
  static TableField get author {
    return _fAuthor =
        _fAuthor ?? SqlSyntax.setField(_fAuthor, 'author', DbType.text);
  }

  static TableField? _fTitle;
  static TableField get title {
    return _fTitle =
        _fTitle ?? SqlSyntax.setField(_fTitle, 'title', DbType.text);
  }

  static TableField? _fDescription;
  static TableField get description {
    return _fDescription = _fDescription ??
        SqlSyntax.setField(_fDescription, 'description', DbType.text);
  }

  static TableField? _fUrl;
  static TableField get url {
    return _fUrl = _fUrl ?? SqlSyntax.setField(_fUrl, 'url', DbType.text);
  }

  static TableField? _furlToImage;
  static TableField get urlToImage {
    return _furlToImage = _furlToImage ??
        SqlSyntax.setField(_furlToImage, 'urlToImage', DbType.text);
  }

  static TableField? _fpublishedAt;
  static TableField get publishedAt {
    return _fpublishedAt = _fpublishedAt ??
        SqlSyntax.setField(_fpublishedAt, 'publishedAt', DbType.datetime);
  }

  static TableField? _fContent;
  static TableField get content {
    return _fContent =
        _fContent ?? SqlSyntax.setField(_fContent, 'content', DbType.text);
  }

  static TableField? _fCreated_at;
  static TableField get created_at {
    return _fCreated_at = _fCreated_at ??
        SqlSyntax.setField(_fCreated_at, 'created_at', DbType.datetime);
  }

  static TableField? _fUpdated_at;
  static TableField get updated_at {
    return _fUpdated_at = _fUpdated_at ??
        SqlSyntax.setField(_fUpdated_at, 'updated_at', DbType.datetime);
  }

  static TableField? _fDeleted_at;
  static TableField get deleted_at {
    return _fDeleted_at = _fDeleted_at ??
        SqlSyntax.setField(_fDeleted_at, 'deleted_at', DbType.datetime);
  }

  static TableField? _fSource_uuid;
  static TableField get source_uuid {
    return _fSource_uuid = _fSource_uuid ??
        SqlSyntax.setField(_fSource_uuid, 'source_uuid', DbType.text);
  }
}
// endregion ArticlesFields

//region ArticlesManager
class ArticlesManager extends SqfEntityProvider {
  ArticlesManager()
      : super(DB(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'articles';
  static const List<String> _primaryKeyList = ['uuid'];
  static const String _whereStr = 'uuid=?';
}

//endregion ArticlesManager
// region Sources
class Sources extends TableBase {
  Sources(
      {this.uuid,
      this.id,
      this.name,
      this.created_at,
      this.updated_at,
      this.deleted_at}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Sources.withFields(this.uuid, this.id, this.name, this.created_at,
      this.updated_at, this.deleted_at) {
    _setDefaultValues();
  }
  Sources.withId(this.uuid, this.id, this.name, this.created_at,
      this.updated_at, this.deleted_at) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Sources.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    uuid = o['uuid'].toString();
    if (o['id'] != null) {
      id = o['id'].toString();
    }
    if (o['name'] != null) {
      name = o['name'].toString();
    }
    if (o['created_at'] != null) {
      created_at = int.tryParse(o['created_at'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['created_at'].toString())!)
          : DateTime.tryParse(o['created_at'].toString());
    }
    if (o['updated_at'] != null) {
      updated_at = int.tryParse(o['updated_at'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['updated_at'].toString())!)
          : DateTime.tryParse(o['updated_at'].toString());
    }
    if (o['deleted_at'] != null) {
      deleted_at = int.tryParse(o['deleted_at'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['deleted_at'].toString())!)
          : DateTime.tryParse(o['deleted_at'].toString());
    }

    isSaved = true;
  }
  // FIELDS (Sources)
  String? uuid;
  String? id;
  String? name;
  DateTime? created_at;
  DateTime? updated_at;
  DateTime? deleted_at;
  bool? isSaved;
  // end FIELDS (Sources)

// COLLECTIONS & VIRTUALS (Sources)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plArticleses', 'plField2'..]) or so on..
  List<Articles>? plArticleses;

  /// get Articles(s) filtered by uuid=source_uuid
  ArticlesFilterBuilder? getArticleses(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (uuid == null) {
      return null;
    }
    return Articles()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .source_uuid
        .equals(uuid)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Sources)

  static const bool _softDeleteActivated = false;
  SourcesManager? __mnSources;

  SourcesManager get _mnSources {
    return __mnSources = __mnSources ?? SourcesManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['uuid'] = uuid;
    if (id != null || !forView) {
      map['id'] = id;
    }
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (created_at != null) {
      map['created_at'] = forJson
          ? created_at!.toString()
          : forQuery
              ? created_at!.millisecondsSinceEpoch
              : created_at;
    } else if (created_at != null || !forView) {
      map['created_at'] = null;
    }
    if (updated_at != null) {
      map['updated_at'] = forJson
          ? updated_at!.toString()
          : forQuery
              ? updated_at!.millisecondsSinceEpoch
              : updated_at;
    } else if (updated_at != null || !forView) {
      map['updated_at'] = null;
    }
    if (deleted_at != null) {
      map['deleted_at'] = forJson
          ? deleted_at!.toString()
          : forQuery
              ? deleted_at!.millisecondsSinceEpoch
              : deleted_at;
    } else if (deleted_at != null || !forView) {
      map['deleted_at'] = null;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['uuid'] = uuid;
    if (id != null || !forView) {
      map['id'] = id;
    }
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (created_at != null) {
      map['created_at'] = forJson
          ? created_at!.toString()
          : forQuery
              ? created_at!.millisecondsSinceEpoch
              : created_at;
    } else if (created_at != null || !forView) {
      map['created_at'] = null;
    }
    if (updated_at != null) {
      map['updated_at'] = forJson
          ? updated_at!.toString()
          : forQuery
              ? updated_at!.millisecondsSinceEpoch
              : updated_at;
    } else if (updated_at != null || !forView) {
      map['updated_at'] = null;
    }
    if (deleted_at != null) {
      map['deleted_at'] = forJson
          ? deleted_at!.toString()
          : forQuery
              ? deleted_at!.millisecondsSinceEpoch
              : deleted_at;
    } else if (deleted_at != null || !forView) {
      map['deleted_at'] = null;
    }

// COLLECTIONS (Sources)
    if (!forQuery) {
      map['Articleses'] = await getArticleses()!.toMapList();
    }
// END COLLECTIONS (Sources)

    return map;
  }

  /// This method returns Json String [Sources]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Sources]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      uuid,
      id,
      name,
      created_at != null ? created_at!.millisecondsSinceEpoch : null,
      updated_at != null ? updated_at!.millisecondsSinceEpoch : null,
      deleted_at != null ? deleted_at!.millisecondsSinceEpoch : null
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      uuid,
      id,
      name,
      created_at != null ? created_at!.millisecondsSinceEpoch : null,
      updated_at != null ? updated_at!.millisecondsSinceEpoch : null,
      deleted_at != null ? deleted_at!.millisecondsSinceEpoch : null
    ];
  }

  static Future<List<Sources>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Sources.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Sources>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Sources>[];
    try {
      objList = list
          .map((sources) => Sources.fromMap(sources as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Sources.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Sources>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Sources> objList = <Sources>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Sources.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('sources.plArticleses') && */ (preloadFields ==
                null ||
            preloadFields.contains('plArticleses'))) {
          /*_loadedfields!.add('sources.plArticleses'); */ obj.plArticleses =
              obj.plArticleses ??
                  await obj.getArticleses()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Sources by ID if exist, otherwise returns null
  /// Primary Keys: String? uuid
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Sources] if exist, otherwise returns null
  Future<Sources?> getById(String? uuid,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (uuid == null) {
      return null;
    }
    Sources? obj;
    final data = await _mnSources.getById([uuid]);
    if (data.length != 0) {
      obj = Sources.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('sources.plArticleses') && */ (preloadFields ==
                null ||
            preloadFields.contains('plArticleses'))) {
          /*_loadedfields!.add('sources.plArticleses'); */ obj.plArticleses =
              obj.plArticleses ??
                  await obj.getArticleses()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Sources) object. If the Primary Key (uuid) field is null, returns Error.
  /// INSERTS (If not exist) OR REPLACES (If exist) data while Primary Key is not null.
  /// Call the saveAs() method if you do not want to save it when there is another row with the same uuid
  /// <returns>Returns BoolResult
  @override
  Future<BoolResult> save({bool ignoreBatch = true}) async {
    final result = BoolResult(success: false);
    try {
      await _mnSources.rawInsert(
          'INSERT ${isSaved! ? 'OR REPLACE' : ''} INTO sources (uuid, id, name, created_at, updated_at, deleted_at)  VALUES (?,?,?,?,?,?)',
          toArgsWithIds(),
          ignoreBatch);
      result.success = true;
      isSaved = true;
    } catch (e) {
      result.errorMessage = e.toString();
    }

    saveResult = result;
    return result;
  }

  void rollbackId() {
    if (isInsert == true) {
      uuid = null;
    }
  }

  /// saveAll method saves the sent List<Sources> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Sources> sourceses) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await DB().batchStart();
    for (final obj in sourceses) {
      await obj.save();
    }
    if (!isStartedBatch) {
      result = await DB().batchCommit();
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns 1
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnSources.rawInsert(
          'INSERT OR REPLACE INTO sources (uuid, id, name, created_at, updated_at, deleted_at)  VALUES (?,?,?,?,?,?)',
          [
            uuid,
            id,
            name,
            created_at != null ? created_at!.millisecondsSinceEpoch : null,
            updated_at != null ? updated_at!.millisecondsSinceEpoch : null,
            deleted_at != null ? deleted_at!.millisecondsSinceEpoch : null
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Sources uuid=$uuid updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Sources uuid=$uuid did not update');
      }
      return 1;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Sources Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// Deletes Sources

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Sources invoked (uuid=$uuid)');
    var result = BoolResult(success: false);
    {
      result = await Articles()
          .select()
          .source_uuid
          .equals(uuid)
          .and
          .delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete) {
      return _mnSources
          .delete(QueryParams(whereString: 'uuid=?', whereArguments: [uuid]));
    } else {
      return _mnSources.updateBatch(
          QueryParams(whereString: 'uuid=?', whereArguments: [uuid]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Sources] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  SourcesFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return SourcesFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  SourcesFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return SourcesFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
  }
  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion sources

// region SourcesField
class SourcesField extends FilterBase {
  SourcesField(SourcesFilterBuilder sourcesFB) : super(sourcesFB);

  @override
  SourcesFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as SourcesFilterBuilder;
  }

  @override
  SourcesFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as SourcesFilterBuilder;
  }

  @override
  SourcesFilterBuilder isNull() {
    return super.isNull() as SourcesFilterBuilder;
  }

  @override
  SourcesFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as SourcesFilterBuilder;
  }

  @override
  SourcesFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as SourcesFilterBuilder;
  }

  @override
  SourcesFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as SourcesFilterBuilder;
  }

  @override
  SourcesFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as SourcesFilterBuilder;
  }

  @override
  SourcesFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as SourcesFilterBuilder;
  }

  @override
  SourcesFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as SourcesFilterBuilder;
  }

  @override
  SourcesFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as SourcesFilterBuilder;
  }

  @override
  SourcesFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as SourcesFilterBuilder;
  }

  @override
  SourcesFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as SourcesFilterBuilder;
  }

  @override
  SourcesField get not {
    return super.not as SourcesField;
  }
}
// endregion SourcesField

// region SourcesFilterBuilder
class SourcesFilterBuilder extends ConjunctionBase {
  SourcesFilterBuilder(Sources obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnSources = obj._mnSources;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  SourcesManager? _mnSources;

  /// put the sql keyword 'AND'
  @override
  SourcesFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  SourcesFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  SourcesFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  SourcesFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  SourcesFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  SourcesFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  SourcesFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  SourcesFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  SourcesFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  SourcesFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  SourcesFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  SourcesField _setField(SourcesField? field, String colName, DbType dbtype) {
    return SourcesField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  SourcesField? _uuid;
  SourcesField get uuid {
    return _uuid = _setField(_uuid, 'uuid', DbType.integer);
  }

  SourcesField? _id;
  SourcesField get id {
    return _id = _setField(_id, 'id', DbType.text);
  }

  SourcesField? _name;
  SourcesField get name {
    return _name = _setField(_name, 'name', DbType.text);
  }

  SourcesField? _created_at;
  SourcesField get created_at {
    return _created_at = _setField(_created_at, 'created_at', DbType.datetime);
  }

  SourcesField? _updated_at;
  SourcesField get updated_at {
    return _updated_at = _setField(_updated_at, 'updated_at', DbType.datetime);
  }

  SourcesField? _deleted_at;
  SourcesField get deleted_at {
    return _deleted_at = _setField(_deleted_at, 'deleted_at', DbType.datetime);
  }

  /// Deletes List<Sources> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);
    // Delete sub records where in (Articles) according to DeleteRule.CASCADE
    final idListArticlesBYsource_uuid = toListPrimaryKeySQL(false);
    final resArticlesBYsource_uuid = await Articles()
        .select()
        .where('source_uuid IN (${idListArticlesBYsource_uuid['sql']})',
            parameterValue: idListArticlesBYsource_uuid['args'])
        .delete(hardDelete);
    if (!resArticlesBYsource_uuid.success) {
      return resArticlesBYsource_uuid;
    }

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnSources!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnSources!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'uuid IN (SELECT uuid from sources ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnSources!.updateBatch(qparams, values);
  }

  /// This method always returns [Sources] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Sources?
  @override
  Future<Sources?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnSources!.toList(qparams);
    final data = await objFuture;
    Sources? obj;
    if (data.isNotEmpty) {
      obj = Sources.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('sources.plArticleses') && */ (preloadFields ==
                null ||
            preloadFields.contains('plArticleses'))) {
          /*_loadedfields!.add('sources.plArticleses'); */ obj.plArticleses =
              obj.plArticleses ??
                  await obj.getArticleses()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Sources]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Sources?
  @override
  Future<Sources> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Sources();
  }

  /// This method returns int. [Sources]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? sourcesCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final sourcesesFuture = await _mnSources!.toList(qparams);
    final int count = sourcesesFuture[0]['CNT'] as int;
    if (sourcesCount != null) {
      sourcesCount(count);
    }
    return count;
  }

  /// This method returns List<Sources> [Sources]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Sources>
  @override
  Future<List<Sources>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Sources> sourcesesData = await Sources.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return sourcesesData;
  }

  /// This method returns Json String [Sources]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Sources]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Sources]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnSources!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Sources]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `uuid` FROM sources WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<String>.
  /// <returns>List<String>
  @override
  Future<List<String>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<String> uuidData = <String>[];
    qparams.selectColumns = ['uuid'];
    final uuidFuture = await _mnSources!.toList(qparams);

    final int count = uuidFuture.length;
    for (int i = 0; i < count; i++) {
      uuidData.add(uuidFuture[i]['uuid'] as String);
    }
    return uuidData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Sources]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnSources!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Sources.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnSources!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion SourcesFilterBuilder

// region SourcesFields
class SourcesFields {
  static TableField? _fUuid;
  static TableField get uuid {
    return _fUuid =
        _fUuid ?? SqlSyntax.setField(_fUuid, 'uuid', DbType.integer);
  }

  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.text);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField? _fCreated_at;
  static TableField get created_at {
    return _fCreated_at = _fCreated_at ??
        SqlSyntax.setField(_fCreated_at, 'created_at', DbType.datetime);
  }

  static TableField? _fUpdated_at;
  static TableField get updated_at {
    return _fUpdated_at = _fUpdated_at ??
        SqlSyntax.setField(_fUpdated_at, 'updated_at', DbType.datetime);
  }

  static TableField? _fDeleted_at;
  static TableField get deleted_at {
    return _fDeleted_at = _fDeleted_at ??
        SqlSyntax.setField(_fDeleted_at, 'deleted_at', DbType.datetime);
  }
}
// endregion SourcesFields

//region SourcesManager
class SourcesManager extends SqfEntityProvider {
  SourcesManager()
      : super(DB(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'sources';
  static const List<String> _primaryKeyList = ['uuid'];
  static const String _whereStr = 'uuid=?';
}

//endregion SourcesManager
class DBSequenceManager extends SqfEntityProvider {
  DBSequenceManager() : super(DB());
}
// END OF ENTITIES
